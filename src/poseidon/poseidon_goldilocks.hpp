#ifndef POSEIDON_GOLDILOCKS
#define POSEIDON_GOLDILOCKS

#include <inttypes.h>
#include <stdint.h> // for uint64_t
#define SPONGE_WIDTH 12
#define MAX_WIDTH 12
#define HALF_N_FULL_ROUNDS 4
#define N_FULL_ROUNDS_TOTAL (2 * HALF_N_FULL_ROUNDS)
#define N_PARTIAL_ROUNDS 22
#define N_ROUNDS (N_FULL_ROUNDS_TOTAL + N_PARTIAL_ROUNDS)

#define GOLDILOCKS_PRIME 0xFFFFFFFF00000001ULL

#define ASM 1
#define uint128_t __uint128_t

typedef unsigned __int128 uint128_t;

extern "C" uint64_t gl_fromm(uint64_t a);
extern "C" uint64_t gl_tom(uint64_t a);

class Poseidon_goldilocks
{
private:
    const static uint64_t Q;
    const static uint64_t MM;
    const static uint64_t CQ;
    const static uint64_t R2;
#if ASM == 1
    inline constexpr static uint64_t ALL_ROUND_CONSTANTS[MAX_WIDTH * N_ROUNDS] = {
        0xF21444035865C495,
        0x43921AD645273FCA,
        0xCEE799B27E1D591B,
        0x803427D670647785,
        0x50F4E010CDFDB988,
        0x07D09BF06B814F44,
        0x95F63E9D95D16DC5,
        0xE35B4C3B2D2C9747,
        0xB0C44424817719A1,
        0xBF337BFE194CE1F9,
        0x9DA5789F80E433BD,
        0x25DB2C7514E1D098,
        0xF722C87F82B4BF5E,
        0x41C18E5464715721,
        0x495DC572F2E920DF,
        0xEF6A077F6C1133BA,
        0xDC5416CAF3202C11,
        0x8F30C09B0284FEA3,
        0x0D8F8CF95841854F,
        0xAE486F366E56C9E8,
        0xBFC647F96A724676,
        0x1903FF0A239D52EE,
        0x969C4BE5E4C78DC3,
        0x08CBBBAC36DD17C7,
        0x21DE0080F4279C34,
        0x959A600B74F632AB,
        0x0639116401EFDAB3,
        0x32825DAE4AE68F26,
        0xE30B2C886F8CCD96,
        0xFCF8535C56B5D2AD,
        0x18C2AD8697127A9D,
        0x110B304097537AB3,
        0x6CE0E5822C63476F,
        0x589D644D99BFEFC3,
        0xDB150D5F3489CB50,
        0xE9C29631ED847D93,
        0x7E2B9411EF2D1507,
        0xFEE96584902F588F,
        0xAF82EC1B4EDFB502,
        0x724663511E4A6DD7,
        0xE7E14C9F9B2A9C90,
        0x86A46438177C4A4C,
        0x11D77B74684C3AF0,
        0xB9C10731FAA95D85,
        0xA8043E556F3D834C,
        0xE6DA86972364BD4A,
        0x09EF74BEB55F5E82,
        0xCB2AD62F8E9E2091,
        0x184DF407AAEE1366,
        0x57BF31BA79F93084,
        0xA6234344EA92DEB3,
        0xDE378D7A008B8AC7,
        0x5D4DEA8247ADE449,
        0x0344D6A059DCE3E7,
        0x4A7BF307448061FF,
        0x9727930015B170F2,
        0xEC0247456A2F016A,
        0xBB21B1A21CE561D5,
        0x1DED0891E527A793,
        0x46A41673BE94EA78,
        0x268D7D8B6840D82F,
        0x95630F9DD74BED01,
        0xAFC26BF9A2EA38E1,
        0x993E44BD2099C57C,
        0xB8F1CC56E2B13C14,
        0x0AF61616D0ED78FC,
        0x647905EFEECE1999,
        0x4C4F474C7C78CED8,
        0xE75FFFB430B5A217,
        0xC9BFC238A5615927,
        0x6BC09C90C28D7577,
        0xA645C6014E54F1E3,
        0x0814283A5E3EBD1A,
        0xD416CA4BE85EB922,
        0xC5EA751A8407A728,
        0xEF6F58BA46F3FBDA,
        0xA72EE4FDEF2B2D6F,
        0x1ED4AD7082B01FF3,
        0x00144884A02B0B73,
        0x39774EC993AD2EA4,
        0x5830F30F9CF0A354,
        0x10415F2072F948A4,
        0xE166D64D98B98ADF,
        0xEE32BCAFABC86400,
        0xDA56EF463A241AB0,
        0xC40E603B6191178F,
        0x8061F181F006103D,
        0x96F37B87BFCD3C1B,
        0x8F18D56209E241AF,
        0x1E0721181314F53B,
        0xE2B470BFCC3E80DA,
        0x6B9038EE9E3D87C8,
        0xFFA5CEEDF509A433,
        0xE4FB3CBB28C352BA,
        0x90D1572F0E474CA8,
        0xF660F29A637D8FD9,
        0xC3AC118CCAFA2142,
        0xAFEAD53ECC79DC31,
        0x82920ADB702EB6C6,
        0xDEE7BBA6919AC09B,
        0xEA071D049DE9C0B7,
        0xF3DE163220909187,
        0x26B6F38507AAFA6D,
        0x7E5FECC580312E00,
        0x7933E475BB6C463B,
        0x79FD449DD94A79E9,
        0xE7F747307BE69FC3,
        0xA3BA361FFEDC8DC4,
        0xC2B69EC5605A59A2,
        0xDA827B11E819F28A,
        0x1BC8D0E601C33182,
        0x2D227ED4914E7EBB,
        0xB503038ABED6FED1,
        0xAEC8C07B247C5237,
        0xCDD6DDC0D2D03B8F,
        0x5E1B0EB9799EA09A,
        0xE819DAB3B48AF1CD,
        0xD4F2D49D8B7327F3,
        0xAE5C170C9865C2E6,
        0x79DDB76BD57A5DAB,
        0x8CA6570AA2E37C38,
        0x12B04BF4B888C453,
        0xFA14C110C52C3439,
        0x7C5740D1CCF34E31,
        0x2DE3345377F512AC,
        0xB6D2B2D097879BC9,
        0xE9D1BE208F0B6132,
        0x7E5680FA091A9B52,
        0x1551E283D606F716,
        0x9EF3B417C854E4B8,
        0x6BB30E38D8B9434F,
        0x6380F84F7381CCAC,
        0x932583863C361474,
        0x61BD9CE06AC4A313,
        0xC7A4FF1B626E5E9F,
        0x64D279BC23CB22C1,
        0xDEEFD7655F2BF3DB,
        0x53B8EC21A9ADDEC4,
        0xAD251B7EA0068D9C,
        0xA49CEA0A1CC443F8,
        0xA450BED7323C97FD,
        0x7BE493DD63F9FE4B,
        0x28449EC529BB786B,
        0x4C27D242978A72A1,
        0x8322D457673BC11E,
        0x7FD9A608479C476C,
        0xBAEDF0FA2211292F,
        0x47E1510388BB0476,
        0x6ECEC2679F6DD0AF,
        0x183970C8C0AE7E12,
        0x70DCA96BA99F5400,
        0x02F1CFB1AF727410,
        0x692AF6F6AC9F4CDF,
        0xEABB4135FC62A37E,
        0x25B554F3BC0F0B46,
        0x697828FC70B193A1,
        0xC53A9643E0864E0A,
        0x69FB8D36BA857090,
        0x11D4E1FB39C917AB,
        0x437D802F72C034EC,
        0x112B05651741746E,
        0x730D8FE9E2155F0F,
        0x97B0D566A413BC8A,
        0x8EE6FCA08E88DE9D,
        0x35B88C656BF6B125,
        0xA4FF9A864AC82659,
        0x71A45AF75572B66B,
        0x5BF1A9B7C6BD3E10,
        0x2D74D7F65B3B2271,
        0xDDE6C8AE9B6D9D9C,
        0x3F51C07F0F8DF020,
        0x70250ECDA07944AD,
        0x132C603ED116C6B2,
        0x964DB5565CE06FEC,
        0xEB9D1EC802BF32DC,
        0xA585D11B63246EF5,
        0x268EA4D635B928D9,
        0x927C93AE1C20655D,
        0xC9EFA1D8585BB1DD,
        0x369D441764A74DFC,
        0x2B4C1FCADAE74A72,
        0x5F4AE9F597E19695,
        0x34786759DCC2FD44,
        0xED25E0AE21968C16,
        0x55DFC620C55A5C5C,
        0xF193198C26BF6F1C,
        0x87FFF9C9E53DD4AA,
        0xFD73596B8EF0809B,
        0xF16DFECEB85B3667,
        0x938E01708EE26DF4,
        0x15063F5A24B9A0C4,
        0xF1AC1453837A7078,
        0xB25E851241584482,
        0xF16983080711A925,
        0xA1809A800B6FAF01,
        0x9BB01F48234B4E8E,
        0x7424B9AB78460420,
        0xA1A1115CC1AE3144,
        0xC38F49A0398CC04A,
        0x9C5291EDCB501EC7,
        0xFDCD26E58AD7392F,
        0x384F0F2C976E8B2D,
        0x9773012B0F569A11,
        0xB028F2CD00CCDED3,
        0x00C1744121DD6CAE,
        0xDFEA4FCE47FD5096,
        0xA9A3AB1C66D54146,
        0xC34EE132010A0B97,
        0x56B702372C0EB86B,
        0x3018268369DAA69B,
        0x48CD1F428DB85A7E,
        0xA751EBB5C7CD6D13,
        0x550C4FD256542F5F,
        0x2F38BD63C153900A,
        0xFB7A9C3DEDC6444E,
        0x005BEC169284B990,
        0xA5EF97C35710E0CD,
        0xA51159AE952333AE,
        0x2D5C900D4E327C55,
        0xD39FCB7506B48099,
        0xB372442E28A22F08,
        0xC64F63626328E247,
        0xFD8FF15627E27018,
        0x2FE45EA5EC4FC4DC,
        0xAEE52295977213B6,
        0x10960BD22E9769D1,
        0x68F71A3351313931,
        0x7069E802A0DEA9C3,
        0x1514E2D8ADE4546A,
        0x7CB10765E6B26079,
        0xAEDFB5EDEBB03EC0,
        0x39869407355A26E3,
        0xBC3A0EC4C8DF6C9B,
        0xA06AFE7D23E1C097,
        0x682EA65CE362BC17,
        0xA3B34354CE7D99B1,
        0x586257A62FDFF97F,
        0x5104D20BBD5CEDE9,
        0xE46D950D5829C7A9,
        0xE679F2827A94401C,
        0xD5D01D3141930A79,
        0x8BB882A117740582,
        0x83EEE85ED4601C28,
        0xC392950BC5E92AB5,
        0x4FED3B51506ED43F,
        0x1BC04830564A3D0E,
        0x1E1E1896B431C86F,
        0xAADB9CA1009FF57A,
        0x5893C782ED04F344,
        0x44D2C75A670FEF42,
        0x74E687FCA210107E,
        0xF6C9C2FD294DA3DE,
        0x0CFEDC74061B7C6D,
        0xD51FE60ECAE68A1B,
        0x18964614638125D2,
        0x47F150C05EECAB34,
        0x3DD9451FC8A945D1,
        0xB86F56D5F70FD467,
        0x56C78D6F015A6135,
        0x875381930E1A3BC0,
        0xF9173E420F6352C5,
        0xFEB0DC07DEE92765,
        0xF7BA8A55F065ACC5,
        0x09F21DB7660C3C06,
        0x71B893C3FE472028,
        0x752E5543D19EF2EC,
        0xB6FE59FAA84FC683,
        0x770AF2C0FA033018,
        0xCFBEED342AFF6DD2,
        0x78BFC52EE8DF2A6F,
        0x935D8AF0B92BF68E,
        0x2065AF05DF017B82,
        0x5C1466C6721A076C,
        0xA319AC9C1BD663B4,
        0xE316C4A95EF04913,
        0x57637ECF0A0FABD5,
        0xE9A39366384A40AD,
        0x8F00252523FFBB05,
        0x0EB4A9F726E51F08,
        0x24F91F77ABE3A6B2,
        0xC80DF516CAD791D0,
        0x342308E7EC42ADDE,
        0xE6C8398A2D75B156,
        0xA11165145B226F43,
        0xE840CF81447D6046,
        0x5AF4AFCB6C8E9A62,
        0x22909E8621CD101A,
        0x05F38E4687C37342,
        0x525D22596040F83C,
        0x8DA05D3C4C310C87,
        0x4D220EC158F55635,
        0xB78B9C5D43170850,
        0x3514EF98483891B4,
        0x96B7CE7996479CBB,
        0xCD0A15336399374A,
        0x919E5A7A6F7457CE,
        0x753BE59E4953DB0E,
        0xFCDE8B6DA432CB51,
        0x751002053E1E0C49,
        0x74454EBF419A7BBB,
        0xDBBF9FAB0FC78CF3,
        0xD141875ABFBB9C9D,
        0xD8E556A0FDB08930,
        0x9BF32EE4390F6982,
        0xFA95491B8A9ADD75,
        0x0ABB2C6C8DAC1987,
        0x26C92121A46FE963,
        0xD206B5DCD6C26868,
        0x0056521ADFA430BB,
        0xD0578BD5F1BE1854,
        0x7D4634AB6BD4BDCB,
        0xB9B7A6E21C886531,
        0x5A3BDCDD5E675002,
        0xC31B7E8724406073,
        0xAF6630674E5B5B84,
        0x121967D6D8D22721,
        0xD7D6FEF743852116,
        0x88085736764ED724,
        0xDA62BEEE13E879C3,
        0x69A73344B0D100AD,
        0x17AA2A6DC85EA322,
        0x2473D06A823E05D1,
        0x899B12D37F71CF7A,
        0x7312D3C8CCC26652,
        0x60CB78B6B832855F,
        0x6A65F10726090FBD,
        0x45E7FA8377A38B0A,
        0x3AB749B0F353AE6A,
        0xF15750CBF221DCCE,
        0xDD832C1AE8E60571,
        0x983224BBD94E2141,
        0x03255DD342CCB5BB,
        0x1628FC5A4B3A462D,
        0x96EDD6A38E29C502,
        0xB1A1D3766FA02435,
        0x4D0143420E6C92EB,
        0xDA905E1AA989E7E5,
        0xC244AA2E99F1F722,
        0xF4DF054308F03E14,
        0xBFE148C4FEE8F47C,
        0x438A3C71A60602C2,
        0x8AE83EF93DB50B6C,
        0x8911474E8E5C2E64,
        0xA4945EE4312795CA,
        0x7D99FF8201970352,
        0xE61FD6285E47B010,
        0x842650330D5D20B2,
        0x1BBEDDC7CDF56F5A,
        0x4D5C6539BEE26AE0,
        0xED9771E0D1AEA4FC,
        0xBE7B183EEC658CB1,
        0xC4CB18101631BD48,
        0x4B16434509FC88B3,
        0xF9C9C81B7638A128,
        0x5937085B35CC65B9,
        0x5F91543F20F54D96,
        0x5476D3CA66455256,
        0x004FC90C0E3D5FB5,
        0xBCC81236636628CA,
        0x7FE558FAC38CABA2,
    };
#else
    inline constexpr static uint64_t ALL_ROUND_CONSTANTS[MAX_WIDTH * N_ROUNDS] = {
        0xb585f766f2144405,
        0x7746a55f43921ad7,
        0xb2fb0d31cee799b4,
        0x0f6760a4803427d7,
        0xe10d666650f4e012,
        0x8cae14cb07d09bf1,
        0xd438539c95f63e9f,
        0xef781c7ce35b4c3d,
        0xcdc4a239b0c44426,
        0x277fa208bf337bff,
        0xe17653a29da578a1,
        0xc54302f225db2c76,
        0x86287821f722c881,
        0x59cd1a8a41c18e55,
        0xc3b919ad495dc574,
        0xa484c4c5ef6a0781,
        0x308bbd23dc5416cc,
        0x6e4a40c18f30c09c,
        0x9a2eedb70d8f8cfa,
        0xe360c6e0ae486f38,
        0xd5c7718fbfc647fb,
        0xc35eae071903ff0b,
        0x849c2656969c4be7,
        0xc0572c8c08cbbbad,
        0xe9fa634a21de0082,
        0xf56f6d48959a600d,
        0xf7d713e806391165,
        0x8297132b32825daf,
        0xad6805e0e30b2c8a,
        0xac51d9f5fcf8535e,
        0x502ad7dc18c2ad87,
        0x57a1550c110b3041,
        0x66bbd30e6ce0e583,
        0x0da2abef589d644e,
        0xf061274fdb150d61,
        0x28b8ec3ae9c29633,
        0x92a756e67e2b9413,
        0x70e741ebfee96586,
        0x019d5ee2af82ec1c,
        0x6f6f2ed772466352,
        0x7cf416cfe7e14ca1,
        0x61df517b86a46439,
        0x85dc499b11d77b75,
        0x4b959b48b9c10733,
        0xe8be3e5da8043e57,
        0xf5c0bc1de6da8699,
        0x40b12cbf09ef74bf,
        0xa637093ecb2ad631,
        0x3cc3f892184df408,
        0x2e479dc157bf31bb,
        0x6f49de07a6234346,
        0x213ce7bede378d7b,
        0x5b0431345d4dea83,
        0xa2de45780344d6a1,
        0x7103aaf94a7bf308,
        0x5326fc0d97279301,
        0xa9ceb74fec024747,
        0x27f8ec88bb21b1a3,
        0xfceb4fda1ded0893,
        0xfac6ff1346a41675,
        0x7131aa45268d7d8c,
        0x9351036095630f9f,
        0xad535b24afc26bfb,
        0x4627f5c6993e44be,
        0x645cf794b8f1cc58,
        0x241c70ed0af61617,
        0xacb8e076647905f1,
        0x3737e9db4c4f474d,
        0xe7ea5e33e75fffb6,
        0x90dee49fc9bfc23a,
        0xd1b1edf76bc09c92,
        0x0b65481ba645c602,
        0x99ad1aab0814283b,
        0x438a7c91d416ca4d,
        0xb60de3bcc5ea751c,
        0xc99cab6aef6f58bc,
        0x69a5ed92a72ee4ff,
        0x5e7b329c1ed4ad71,
        0x5fc0ac0800144885,
        0x32db829239774eca,
        0x0ade699c5830f310,
        0x7cc5583b10415f21,
        0x85df9ed2e166d64f,
        0x6604df4fee32bcb1,
        0xeb84f608da56ef48,
        0xda608834c40e603d,
        0x8f97fe408061f183,
        0xa93f485c96f37b89,
        0x6704e8ee8f18d563,
        0xcee3e9ac1e072119,
        0x510d0e65e2b470c1,
        0xf6323f486b9038f0,
        0x0b508cdeffa5ceef,
        0xf2417089e4fb3cbd,
        0x60e75c2890d15730,
        0xa6217d8bf660f29c,
        0x7159cd30c3ac118e,
        0x839b4e8fafead540,
        0x0d3f3e5e82920adc,
        0x8f7d83bddee7bba8,
        0x780f2243ea071d06,
        0xeb915845f3de1634,
        0xd19e120d26b6f386,
        0x016ee53a7e5fecc6,
        0xcb5fd54e7933e477,
        0xacb8417879fd449f,
        0x9c22190be7f74732,
        0x5d693c1ba3ba3621,
        0xdcef0797c2b69ec7,
        0x3d639263da827b13,
        0xe273fd971bc8d0e7,
        0x418f02702d227ed5,
        0x8c25fda3b503038c,
        0x2cbaed4daec8c07c,
        0x5f58e6afcdd6ddc2,
        0x284650ac5e1b0eba,
        0x635b337ee819dab5,
        0x9f9a036ed4f2d49f,
        0xb93e260cae5c170e,
        0xb0a7eae879ddb76d,
        0xd0762cbc8ca6570c,
        0x34c6efb812b04bf5,
        0x40bf0ab5fa14c112,
        0xb6b570fc7c5740d3,
        0x5a27b9002de33454,
        0xb1a5b165b6d2b2d2,
        0x8722e0ace9d1be22,
        0x788ee3b37e5680fb,
        0x14a726661551e284,
        0x98b7672f9ef3b419,
        0xbb93ae776bb30e3a,
        0x28fd3b046380f850,
        0x30a4680593258387,
        0x337dc00c61bd9ce1,
        0xd5eca244c7a4ff1d,
        0x7762638264d279bd,
        0xc1e434bedeefd767,
        0x0299351a53b8ec22,
        0xb2d456e4ad251b80,
        0x3e9ed1fda49cea0b,
        0x2972a92ba450bed8,
        0x20216dd77be493de,
        0xadffe8cf28449ec6,
        0x1c4dbb1c4c27d243,
        0x15a16a8a8322d458,
        0x388a128b7fd9a609,
        0x2300e5d6baedf0fb,
        0x2f63aa8647e15104,
        0xf1c36ce86ecec269,
        0x27181125183970c9,
        0xe584029370dca96d,
        0x4d9bbc3e02f1cfb2,
        0xea35bc29692af6f8,
        0x18e21b4beabb4137,
        0x1e3b9fc625b554f4,
        0x25d64362697828fd,
        0x5a3f1bb1c53a9645,
        0xdb7f023869fb8d38,
        0xb462065911d4e1fc,
        0x49c24ae4437d8030,
        0xd793862c112b0566,
        0xaadd1106730d8feb,
        0xc43b6e0e97b0d568,
        0xe29024c18ee6fca2,
        0x5e50c27535b88c66,
        0x10383f20a4ff9a87,
        0x38e8ee9d71a45af8,
        0xdd5118375bf1a9b9,
        0x775005982d74d7f7,
        0x86ab99b4dde6c8b0,
        0xb1204f603f51c080,
        0xef61ac8470250ecf,
        0x1bbcd90f132c603f,
        0x0cd1dabd964db557,
        0x11a3ae5beb9d1ec9,
        0xf755bfeea585d11d,
        0xa3b83250268ea4d7,
        0x516306f4927c93af,
        0xddb4ac49c9efa1da,
        0x64bb6dec369d4418,
        0xf9cc95c22b4c1fcc,
        0x08d37f755f4ae9f6,
        0xeec49b613478675b,
        0xf143933aed25e0b0,
        0xe4c5dd8255dfc622,
        0xe7ad7756f193198e,
        0x92c2318b87fff9cb,
        0x739c25f8fd73596d,
        0x5636cac9f16dfed0,
        0xdd8f909a938e0172,
        0xc6401fe115063f5b,
        0x8ad97b33f1ac1455,
        0x0c49366bb25e8513,
        0x0784d3d2f1698309,
        0x530fb67ea1809a81,
        0x410492299bb01f49,
        0x139542347424b9ac,
        0x9cb0bd5ea1a1115e,
        0x02e3f615c38f49a1,
        0x985d4f4a9c5291ef,
        0x775b9feafdcd26e7,
        0x304265a6384f0f2d,
        0x593664c39773012c,
        0x4f0a2e5fb028f2ce,
        0xdd611f1000c17442,
        0xd8185f9adfea4fd0,
        0xef87139ca9a3ab1e,
        0x3ba71336c34ee133,
        0x7d3a455d56b70238,
        0x660d32e130182684,
        0x297a863f48cd1f43,
        0x90e0a736a751ebb7,
        0x549f80ce550c4fd3,
        0x0f73b2922f38bd64,
        0x16bf1f73fb7a9c3f,
        0x6d1f5a59005bec17,
        0x02ff876fa5ef97c4,
        0xc5cb72a2a51159b0,
        0x8470f39d2d5c900e,
        0x25abb3f1d39fcb76,
        0x23eb8cc9b372442f,
        0xd687ba55c64f6364,
        0xda8d9e90fd8ff158,
        0xe3cbdc7d2fe45ea7,
        0xb9a8c9b3aee52297,
        0xc0d28a5c10960bd3,
        0x45d7ac9b68f71a34,
        0xeeb76e397069e804,
        0x3d06c8bd1514e2d9,
        0x9c9c98207cb10767,
        0x65700b51aedfb5ef,
        0x911f451539869408,
        0x7ae6849fbc3a0ec6,
        0x3bb340eba06afe7e,
        0xb46e9d8b682ea65e,
        0x8dcf22f9a3b34356,
        0x77bdaeda586257a7,
        0xf19e400a5104d20d,
        0xc368a348e46d950f,
        0x9ef1cd60e679f284,
        0xe89cd854d5d01d33,
        0x5cd377dc8bb882a2,
        0xa7b0fb7883eee860,
        0x7684403ec392950d,
        0x5fa3f06f4fed3b52,
        0x8df57ac11bc04831,
        0x2db01efa1e1e1897,
        0x54846de4aadb9ca2,
        0xba6745385893c784,
        0x541d496344d2c75b,
        0xe909678474e687fe,
        0xdfe89923f6c9c2ff,
        0xece5a71e0cfedc75,
        0x5ff98fd5d51fe610,
        0x83e8941918964615,
        0x5922040b47f150c1,
        0xf97d750e3dd94521,
        0x5080d4c2b86f56d7,
        0xa7de115b56c78d70,
        0x6a9242ac87538194,
        0xf7856ef7f9173e44,
        0x2265fc92feb0dc09,
        0x17dfc8e4f7ba8a57,
        0x9001a64209f21db8,
        0x90004c1371b893c5,
        0xb932b7cf752e5545,
        0xa0b1df81b6fe59fc,
        0x8ef1dd26770af2c2,
        0x0541a4f9cfbeed35,
        0x9e61106178bfc530,
        0xb3767e80935d8af2,
        0x0098d5782065af06,
        0x31d191cd5c1466c7,
        0x410fefafa319ac9d,
        0xbdf8f242e316c4ab,
        0x9e8cd55b57637ed0,
        0xde122bebe9a39368,
        0x4d001fd58f002526,
        0xca6637000eb4a9f8,
        0x2f2339d624f91f78,
        0x6d1a7918c80df518,
        0xdf9a4939342308e9,
        0xebc2151ee6c8398c,
        0x03cc2ba8a1116515,
        0xd341d037e840cf83,
        0x387cb5d25af4afcc,
        0xbba2515f22909e87,
        0x7248fe7705f38e47,
        0x4d61e56a525d225a,
        0x262e963c8da05d3d,
        0x59e89b094d220ec2,
        0x055d5b52b78b9c5e,
        0x82b27eb33514ef99,
        0xd30094ca96b7ce7b,
        0xcf5cb381cd0a1535,
        0xfeed4db6919e5a7c,
        0x41703f53753be59f,
        0x5eeea940fcde8b6f,
        0x4cd1f1b175100206,
        0x4a20358574454ec0,
        0x1478d361dbbf9fac,
        0x6f02dc07d141875c,
        0x296a202ed8e556a2,
        0x2afd67999bf32ee5,
        0x7acfd96efa95491d,
        0x6798ba0c0abb2c6d,
        0x34c6f57b26c92122,
        0x5736e1bad206b5de,
        0x20057d2a0056521b,
        0x3dea5bd5d0578bd7,
        0x16e50d897d4634ac,
        0x29bff3ecb9b7a6e3,
        0x475cd3205a3bdcde,
        0x18a42105c31b7e88,
        0x023e7414af663068,
        0x15147108121967d7,
        0xe4a3dff1d7d6fef9,
        0x01a8d1a588085737,
        0x11b4c74eda62beef,
        0xe587cc0d69a73346,
        0x1ff7327017aa2a6e,
        0x594e29c42473d06b,
        0xf6f31db1899b12d5,
        0xc02ac5e47312d3ca,
        0xe70201e960cb78b8,
        0x6f90ff3b6a65f108,
        0x42747a7245e7fa84,
        0xd1f507e43ab749b2,
        0x1c86d265f15750cd,
        0x3996ce73dd832c1c,
        0x8e7fba02983224bd,
        0xba0dec7103255dd4,
        0x9e9cbd781628fc5b,
        0xdae8645996edd6a5,
        0xdebe0853b1a1d378,
        0xa49229d24d014343,
        0x7be5b9ffda905e1c,
        0xa3c95eaec244aa30,
        0x0230bca8f4df0544,
        0x4135c2bebfe148c6,
        0x166fc0cc438a3c72,
        0x3762b59a8ae83efa,
        0xe8928a4c89114750,
        0x2a440b51a4945ee5,
        0x80cefd2b7d99ff83,
        0xbb9879c6e61fd62a,
        0x6e7c8f1a84265034,
        0x164bb2de1bbeddc8,
        0xf3c12fe54d5c653b,
        0x40b9e922ed9771e2,
        0x551f5b0fbe7b1840,
        0x25032aa7c4cb1811,
        0xaaed34074b164346,
        0x8ffd96bbf9c9c81d,
        0x70fc91eb5937085c,
        0x7f795e2a5f915440,
        0x4543d9df5476d3cb,
        0xf172d73e004fc90d,
        0xdfd1c4febcc81238,
        0xbc8dfb627fe558fc,
    };
#endif

#if ASM == 1
    inline constexpr static uint64_t MDS_MATRIX_DIAG[12] = {0x7FFFFFFF8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    inline constexpr static uint64_t MDS_MATRIX_CIRC[12] = {0x00000010FFFFFFEF,
                                                            0x0000000EFFFFFFF1,
                                                            0x00000028FFFFFFD7,
                                                            0x0000000FFFFFFFF0,
                                                            0x00000001FFFFFFFE,
                                                            0x0000001BFFFFFFE4,
                                                            0x0000000CFFFFFFF3,
                                                            0x0000000CFFFFFFF3,
                                                            0x00000026FFFFFFD9,
                                                            0x00000011FFFFFFEE,
                                                            0x00000021FFFFFFDE,
                                                            0x00000013FFFFFFEC};
#else
    inline constexpr static uint64_t MDS_MATRIX_DIAG[12] = {8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    inline constexpr static uint64_t MDS_MATRIX_CIRC[12] = {17, 15, 41, 16, 2, 28, 13, 13, 39, 18, 34, 20};
#endif
    void static partial_rounds_naive(uint64_t (&state)[SPONGE_WIDTH], uint8_t &round_ctr);
    void static full_rounds(uint64_t (&state)[SPONGE_WIDTH], uint8_t &round_ctr);
    void static constant_layer(uint64_t (&state)[SPONGE_WIDTH], uint8_t &round_ctr);
    void static sbox_layer(uint64_t (&state)[SPONGE_WIDTH]);
    void static sbox_layer_new(uint64_t (&state)[SPONGE_WIDTH]);

    void static sbox_monomial(uint64_t &x);
    void static mds_layer(uint64_t (&state)[SPONGE_WIDTH]);
    uint64_t static mds_row_shf(uint64_t r, uint64_t (&v)[SPONGE_WIDTH]);

    inline static uint64_t add_gl(uint64_t in1, uint64_t in2)
    {
        uint64_t res = 0;
        if (__builtin_add_overflow(in1, in2, &res))
        {
            res += CQ;
        }
        return res;
    }

    inline static uint64_t gl_add(uint64_t in1, uint64_t in2)
    {
        uint64_t r;
        uint64_t q;
        uint64_t m = GOLDILOCKS_PRIME;
        __asm__(
            "mulq   %3\n\t"
            "divq   %4\n\t"
            : "=a"(r), "=&d"(q)
            : "a"(in1), "rm"(in2), "rm"(m));
        // printf("r: %lu,q: %lu\n", r, q);
        return q;
    };

    inline static uint64_t gl_mmul(uint64_t in1, uint64_t in2)
    {
        uint64_t res;
        __asm__("mov   %1, %%rax\n\t"
                "mul   %2\n\t"
                "mov   %%rdx, %%r8\n\t"
                "mov   %%rax, %%r9\n\t"
                "mulq   %3\n\t"
                "mulq   %4\n\t"
                "add    %%r9, %%rax\n\t"
                "adc    %%r8, %%rdx\n\t"
                "jnc  1f\n\t"
                "add   %5, %%rdx\n\t"
                "1:"
                : "=&d"(res)
                : "r"(in1), "r"(in2), "m"(MM), "m"(Q), "m"(CQ)
                : "%rax", "%r8", "%r9");
        return res;
    }

public:
    void static hash(uint64_t (&input)[SPONGE_WIDTH]);
};

#endif // POSEIDON_GOLDILOCKS